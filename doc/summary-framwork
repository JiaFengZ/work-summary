框架爱涉猎

# 1 MVVM 框架的诞生缘由

大多数情况下应用页面就是数据的展示，在框架诞生前，jquery时代就是直接操纵页面DOM元素，获取元素，设置元素的 innerHTML 展示相应的数据。
这样直接操作页面元素是很低效繁琐的，框架的诞生就是为了让我们的注意力只关注数据的输入输出，事件的交互，怎么样简化从数据到页面输出
和从事件操作到数据这两个过程就是框架要解决的问题。

基本思路都是使用模版，生成类似DOM的结构树，遍历结构树上的元素属性标识绑定事件。
* `angularjs` 使用基于 HTML 的特定的模版语法，通过解释器 parser 解析生成目标 DOMTree，声明式模版，是对原始html的功能升级改造，这些特定模版语法在angularjs中称之为指令
* `vue` 表面上借鉴了 angularjs 使用了基于 HTML 的模板语法，允许开发者声明式地将 DOM 绑定至底层 Vue 实例的数据，也有类似指令的概念，但是底层上与 angular 是有所不同的，
    将模板编译成虚拟 DOM 渲染函数。
* `React` 直接使用 jsx 语法在 js 中书写模版，把模版字符串转换成 virtualDom，使用完整  virtualDom 生成 DOMTree

有了模版之后，要解决的问题就是数据更新和事件交互。
数据更新涉及到两个过程：如何检测数据的更新？检测到数据更新后如何把更新输出到界面上？

检测数据更新的办法：
* `angularjs` 脏值检查，遍历观察者，判断改变前后值是否发生变化，也就是脏检查，是主动的。具体在angular中的实现就是：
解析模版过程中给根据指令元素节点绑定了事件，同样是根据双大括号的标识记录输出标记，在angularjs的函数作用域内执行事件方法完毕后会触发脏值检测循环，
一旦检测数据模型scope中的数据发生变化，就会根据相应的输出的标记把数据更新渲染到界面上。触发变动的来源有：用户事件的输入、服务端数据的输入。

* `vue` 劫持数据的改变行为，每当行为发生，就做一次变化检测。
```javascript
var obj = {};

Object.defineProperty(obj, 'txt', {
    get: function() {
        return obj
    },
    set: function(newValue) {
        document.getElementById('txt').value = newValue;        
    }
});

document.getElementById('txt').addEventListener('change', function(e) {
    obj.txt = e.target.value;
});
```

* `React` 不需要检测数据的变化，采取的不是双向数据绑定的策略，而是单向数据流的理念，模版的数据状态存储在state中，
主动调用setState更新state，生成的虚拟DOM，进行diffs对比直接更新DOM树。

无论哪种方式实现的框架，都有一个共同点：把模版、数据、交互事件封装成特定功能组合，称之为组件，在 angularjs 中就是 `component` 的概念，在
vue 就是一个单文件组件 `<script></script><template></template><style></style>`，在 react 中类似 vue，每个 `component` 都内聚着 `state` `methods`。
这个就是组件化。

# 2 总结：什么是 MVVM 框架？
MVVM 由以下三个内容组成
• View：界面
• Model：数据模型
• ViewModel：作为桥梁负责沟通 View 和 Model
在 JQuery 时期，如果需要刷新 UI 时，需要先取到对应的 DOM 再更新 UI，这样
数据和业务的逻辑就和页面有强耦合。
在 MVVM 中，UI 是通过数据驱动的，数据一旦改变就会相应的刷新对应的 UI，UI
如果改变，也会改变对应的数据。这种方式就可以在业务处理中只关心数据的流转，而
无需直接和页面打交道。ViewModel 只关心数据和业务的处理，不关心 View 如何处理
数据，在这种情况下，View 和 Model 都可以独立出来，任何一方改变了也不一定需要
改变另一方，并且可以将一些可复用的逻辑放在一个 ViewModel 中，让多个 View 复
用这个 ViewModel

vue 和 angularjs、Angular都可称之为 MVVM 框架
React 是单向数据流的理念，不存在双向数据绑定的概念，需要主动setState从而驱动更新界面。（代码操作层面上）

# 3 Angular 前瞻（(来源[https://www.angular.cn/docs])）

Angular 的基本构造是 `NgModule`，他为组件提供了编译的上下文环境，`NgModule`会把相关的代码收集到一个功能集合中，Angular应用就只由一系列的 NgModule 构成的。应用至少有一个引导应用的跟模块，通常还会有很多特性模块。
* 组件定义视图
* 组件可注入服务
组件和服务都是简单的类，这些类使用装饰器标记类型，提供元数据告知 Angular 怎么使用它们。
* 组件类的元数据将组件类和一个用来定义视图的模版关联起来，模版把普通的 `html`和`指令` `绑定标记`组合起来
* 服务的元数据提供一些信息，Angular 使用这些信息让组件通过依赖注入DI使用这些服务

## 3.1 模块
NgModule 为一个组件集声明了编译的上下文环境，它专注于某个应用领域、某个工作流或一组紧密相关的能力。 NgModule 可以将其组件和一组相关代码（如服务）关联起来，形成功能单元。
每个 Angular 应用都有一个根模块，通常命名为 AppModule。根模块提供了用来启动应用的引导机制。 一个应用通常会包含很多功能模块

## 3.2 组件
每个 Angular 应用都至少有一个组件，也就是根组件，它会把组件树和页面中的 DOM 连接起来。 每个组件都会定义一个类，其中包含应用的数据和逻辑，并与一个 HTML 模板相关联，该模板定义了一个供目标环境下显示的视图。
@Component() 装饰器表明紧随它的那个类是一个组件，并提供模板和该组件专属的元数据（装饰器是一些用于修饰 JavaScript 类的函数。Angular 定义了许多装饰器，这些装饰器会把一些特定种类的元数据附加到类上，以便 Angular 了解这些这些类的含义以及该如何使用它们。）

### 3.2.1 模板、指令和数据绑定
模板会把 HTML 和 Angular 的标记（markup）组合起来，这些标记可以在 HTML 元素显示出来之前修改它们。 模板中的指令会提供程序逻辑，而绑定标记会把你应用中的数据和 DOM 连接在一起。 有两种类型的数据绑定
* ``事件绑定``让你的应用可以通过更新应用的数据来响应目标环境下的用户输入
* ``属性绑定``让你将从应用数据中计算出来的值插入到 HTML 中

## 3.3 服务和注入依赖
``对于与特定视图无关并希望跨组件共享的数据或逻辑，可以创建服务类``。 服务类的定义通常紧跟在 “@Injectable()” 装饰器之后。该装饰器提供的元数据可以让你的服务作为依赖被注入到客户组件中。

## 3.4 路由
Angular 的 Router 模块提供了一个服务，它可以让你定义在应用的各个不同状态和视图层次结构之间导航时要使用的路径
``要定义导航规则，你就要把导航路径和你的组件关联起来``
